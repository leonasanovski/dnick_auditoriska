"""
    NEW = 'new'
    IN_PROGRESS = 'in_progress'
    COMPLETED = 'completed'
    LIST_TUPLES_CHOICES = [
        BAZA:'VIDLIVO',
        (NEW, 'New'),
        (IN_PROGRESS, 'In Progress'),
        (COMPLETED, 'Completed'),
    ]

    DICTIONARY_CHOICES = {
        BAZA:'VIDLIVO',
        NEW:'new',
        IN_PROGRESS:'in progress',
        COMPLETED:'completed'
    }
    prviot (1) element e sekogash ona shto odi vo baza, a toa e mapping za toa shto go gledame, odnosno vtoriot element (2)
    Potocno napisano:
    The first element in each tuple is the actual value to be set on the model, and the second element is the human-readable name.
    """

    #Types of references to other objects
    """
    CASCADE - author = models.ForeignKey(Author, on_delete=models.CASCADE)
    #Cascade kazuva deka pri brisenje od klasata avtor, ke se izbrise sekoj produkt koj go ima ovoj avtor (da snema traga)
    author = models.ForeignKey(Author, on_delete=models.PROTECT)
    #Protect znaci deka ako se izbrise nekoj avtor koj ima soodvetno nekoi produkti, ke proba da gi zastiti objektite frlajki error
    author = models.ForeignKey(Author, on_delete=models.SET_NULL, null=True)
    #SetNull znaci deka ako se izbrise soodvetno nekoj avtor, produktot so toj avtor ke ima NULL vrednost na mestoto na avtor, pa zatoa i dozvoluvame null=True
    author = models.ForeignKey(Author, on_delete=models.DO_NOTHING)
    #DoNothing ne pravi nisto pri brisenje, na nekoj nacin ke si ostane
    """
    #Relations
    """
    SO FOREIGN KEY SE BELEZI SOODVETNO MANYTOONE RELATIONSHIP - mnogu produkti na eden avtor, i eden avtor so mn produkti
    Se trga od klasata kaj sto e napisano
    from django.db import models
    PRIMERCHE:
    class Author(models.Model):
        name = models.CharField(max_length=100)

    class Book(models.Model):
        title = models.CharField(max_length=200)
        author = models.ForeignKey(Author, on_delete=models.CASCADE)  # Many books can belong to one author
        deka tuka e napisano, zatoa vazi slednovo, Many books to one Author
        FORMULATA ZA KAKO:
        A {ime na klasata vo koja e napisano} can have {do klasata sto e napisano} (zavisno od koja relacija ima 1 - n, n - 1, n - n, 1 - 1)
    """


"""
print(Pilot.objects.filter(rank="J").get())
print(Pilot.objects.filter(rank="O").get()) #Kaj get frla exception ako e empty, se koristi za PRimary key najcesto, ako ima povekj frla exception
print(Pilot.objects.filter(rank="O").first())   #za da ne frle exceptiom
print(Pilot.objects.all().values_list("name"))
print(Pilot.objects.all().order_by("name"))
print(Pilot.objects.all().order_by("-name"))
print(Pilot.objects.filter(total_flight_hours__in=[1,2,3]))
print(Pilot.objects.exists())
print(Pilot.objects.filter(rank="J").exists())
print(Pilot.objects.filter(rank="O").exists())
"""